name: CI Pipeline

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

jobs:
  frontend:
    name: Angular Build & Test
    runs-on: ubuntu-latest
    environment: VARIABLES
    defaults:
      run:
        working-directory: frontend

    env:
      API_URL: ${{ secrets.API_URL }}
      API_KEY: ${{ secrets.API_KEY }}
      AUTH_DOMAIN: ${{ secrets.AUTH_DOMAIN }}
      PROJECT_ID: ${{ secrets.PROJECT_ID }}
      STORAGE_BUCKET: ${{ secrets.STORAGE_BUCKET }}
      MESSAGING_SENDER_ID: ${{ secrets.MESSAGING_SENDER_ID }}
      APP_ID: ${{ secrets.APP_ID }}
      MEASUREMENT_ID: ${{ secrets.MEASUREMENT_ID }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Generate .env file from GitHub secrets
        run: |
          echo "API_URL=$API_URL" >> .env
          echo "API_KEY=$API_KEY" >> .env
          echo "AUTH_DOMAIN=$AUTH_DOMAIN" >> .env
          echo "PROJECT_ID=$PROJECT_ID" >> .env
          echo "STORAGE_BUCKET=$STORAGE_BUCKET" >> .env
          echo "MESSAGING_SENDER_ID=$MESSAGING_SENDER_ID" >> .env
          echo "APP_ID=$APP_ID" >> .env
          echo "MEASUREMENT_ID=$MEASUREMENT_ID" >> .env

      - name: Build Angular app
        run: npm run build -- --configuration=production

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy Firebase Hosting
        run: firebase deploy --only hosting --project ${{ secrets.PROJECT_ID }}
        working-directory: frontend
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_DEPLOY_TOKEN }}

  backend:
    name: Spring Boot Build & Integration Test
    runs-on: ubuntu-latest
    environment: VARIABLES
    defaults:
      run:
        working-directory: backend

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven Wrapper
        run: |
          chmod +x ../mvnw
          ../mvnw clean verify -Dproject.id=${{ secrets.PROJECT_ID }}

      - name: Build Firebase Emulator image
        run: |
          docker build -t custom-firebase-emulator:latest src/test/resources/docker

      - name: Start Firebase Emulator container
        run: |
          docker run -d --name firebase-emulator -p 9080:9080 custom-firebase-emulator:latest

      - name: Wait for Firebase Emulator to be ready
        run: |
          for i in {1..30}; do
            curl -f http://localhost:9080 && break
            echo "Waiting for emulator to start..."
            sleep 5
          done

      - name: Build and test Spring Boot application
        run: |
          ../mvnw clean verify -Dspring.profiles.active=test -Dproject.id=${{ secrets.PROJECT_ID }}

      - name: Stop Firebase Emulator container
        if: always()
        run: |
          docker stop firebase-emulator
          docker rm firebase-emulator

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS_JSON }}'

      - name: Deploy on artifact registry
        run: ../mvnw jib:build -Dproject.id=${{ secrets.PROJECT_ID }} -DskipTests -Djib.image=europe-west1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/gcp-app-demo/backend

      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: backend
          image: europe-west1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/gcp-app-demo/backend
          region: europe-west1
          project_id: ${{ secrets.PROJECT_ID }}
          flags: --allow-unauthenticated --min-instances=1 --max-instances=1